// -------------------------------------------------------------
// 
// File Name: C:\Users\nievep\Downloads\Advanced VLSI Design\Project 1\REPO\Advanced-VLSI-Project-REPO\Project 1\MatlabFilterCalculation\codegen\LowpassFilter\hdlsrc\LowpassFilter_tb.v
// Created: 2025-02-25 23:37:34
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: LowpassFilter_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module LowpassFilter_tb;



  reg  clk;
  reg  reset;
  wire enb;
  wire rawData_validIn;
  wire validOut_done;  // ufix1
  wire rdEnb;
  wire validOut_done_enb;  // ufix1
  reg [7:0] dataOut_addr;  // ufix8
  wire validOut_lastAddr;  // ufix1
  wire resetn;
  reg  check2_done;  // ufix1
  wire dataOut_done;  // ufix1
  wire dataOut_done_enb;  // ufix1
  wire dataOut_active;  // ufix1
  reg  holdData_validIn;
  reg  validIn_offset;
  wire validIn_1;
  reg [7:0] dataIn_addr;  // ufix8
  wire dataIn_active;  // ufix1
  wire tb_enb;
  wire dataIn_enb;  // ufix1
  wire [7:0] dataIn_addr_delay_1;  // ufix8
  reg signed [31:0] fp_dataIn;  // sfix32
  reg signed [15:0] rawData_dataIn;  // sfix16_En15
  reg signed [31:0] status_dataIn;  // sfix32
  reg signed [15:0] holdData_dataIn;  // sfix16_En15
  reg signed [15:0] dataIn_offset;  // sfix16_En15
  wire signed [15:0] dataIn_1;  // sfix16_En15
  wire snkDone;
  wire snkDonen;
  wire ce_out;
  wire signed [34:0] dataOut;  // sfix35_En32
  wire validOut;
  wire dataOut_enb;  // ufix1
  wire dataOut_lastAddr;  // ufix1
  reg  check1_done;  // ufix1
  wire [7:0] dataOut_addr_delay_1;  // ufix8
  reg signed [31:0] fp_dataOut_expected;  // sfix32
  reg signed [34:0] dataOut_expected;  // sfix35_En32
  reg signed [31:0] status_dataOut_expected;  // sfix32
  wire signed [34:0] dataOut_ref;  // sfix35_En32
  reg  dataOut_testFailure;  // ufix1
  wire [7:0] validOut_addr_delay_1;  // ufix8
  reg signed [31:0] fp_validOut_expected;  // sfix32
  reg  validOut_expected;
  reg signed [31:0] status_validOut_expected;  // sfix32
  wire validOut_ref;
  reg  validOut_testFailure;  // ufix1
  wire testFailure;  // ufix1


  // Data source for validIn
  assign rawData_validIn = 1'b1;

  assign validOut_done_enb = validOut_done & rdEnb;

  assign validOut_lastAddr = dataOut_addr >= 8'b11000111;

  assign validOut_done = validOut_lastAddr & resetn;

  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_2
      if (reset) begin
        check2_done <= 0;
      end
      else begin
        if (validOut_done_enb) begin
          check2_done <= validOut_done;
        end
      end
    end

  assign dataOut_done_enb = dataOut_done & rdEnb;

  assign dataOut_active = dataOut_addr != 8'b11000111;

  // holdData reg for validIn
  always @(posedge clk)
    begin : stimuli_validIn
      if (reset) begin
        holdData_validIn <= 1'bx;
      end
      else begin
        holdData_validIn <= rawData_validIn;
      end
    end

  always @(rawData_validIn or rdEnb)
    begin : stimuli_validIn_1
      if (rdEnb == 1'b0) begin
        validIn_offset <= holdData_validIn;
      end
      else begin
        validIn_offset <= rawData_validIn;
      end
    end

  assign #2 validIn_1 = validIn_offset;

  assign dataIn_active = dataIn_addr != 8'b11000111;

  assign dataIn_enb = dataIn_active & (rdEnb & tb_enb);

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 199
  always @(posedge clk)
    begin : dataIn_process
      if (reset == 1'b1) begin
        dataIn_addr <= 8'b00000000;
      end
      else begin
        if (dataIn_enb) begin
          if (dataIn_addr >= 8'b11000111) begin
            dataIn_addr <= 8'b00000000;
          end
          else begin
            dataIn_addr <= dataIn_addr + 8'b00000001;
          end
        end
      end
    end

  assign #1 dataIn_addr_delay_1 = dataIn_addr;

  // Data source for dataIn
  initial
    begin : dataIn_fileread
      fp_dataIn = $fopen("dataIn.dat", "r");
      status_dataIn = $rewind(fp_dataIn);
    end

  always @(dataIn_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_dataIn <= 16'bx;
      end
      else if (rdEnb == 1) begin
        status_dataIn = $fscanf(fp_dataIn, "%h", rawData_dataIn);
      end
    end

  // holdData reg for dataIn
  always @(posedge clk)
    begin : stimuli_dataIn
      if (reset) begin
        holdData_dataIn <= 16'bx;
      end
      else begin
        holdData_dataIn <= rawData_dataIn;
      end
    end

  always @(rawData_dataIn or rdEnb)
    begin : stimuli_dataIn_1
      if (rdEnb == 1'b0) begin
        dataIn_offset <= holdData_dataIn;
      end
      else begin
        dataIn_offset <= rawData_dataIn;
      end
    end

  assign #2 dataIn_1 = dataIn_offset;

  assign snkDonen =  ~ snkDone;

  assign resetn =  ~ reset;

  assign tb_enb = resetn & snkDonen;

  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);

  assign #2 enb = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  LowpassFilter u_LowpassFilter (.clk(clk),
                                 .reset(reset),
                                 .clk_enable(enb),
                                 .dataIn(dataIn_1),  // sfix16_En15
                                 .validIn(validIn_1),
                                 .ce_out(ce_out),
                                 .dataOut(dataOut),  // sfix35_En32
                                 .validOut(validOut)
                                 );

  assign dataOut_enb = ce_out & dataOut_active;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 199
  always @(posedge clk)
    begin : dataOut_1_process
      if (reset == 1'b1) begin
        dataOut_addr <= 8'b00000000;
      end
      else begin
        if (dataOut_enb) begin
          if (dataOut_addr >= 8'b11000111) begin
            dataOut_addr <= 8'b00000000;
          end
          else begin
            dataOut_addr <= dataOut_addr + 8'b00000001;
          end
        end
      end
    end

  assign dataOut_lastAddr = dataOut_addr >= 8'b11000111;

  assign dataOut_done = dataOut_lastAddr & resetn;

  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        check1_done <= 0;
      end
      else begin
        if (dataOut_done_enb) begin
          check1_done <= dataOut_done;
        end
      end
    end

  assign snkDone = check1_done & check2_done;

  assign #1 dataOut_addr_delay_1 = dataOut_addr;

  // Data source for dataOut_expected
  initial
    begin : dataOut_expected_fileread
      fp_dataOut_expected = $fopen("dataOut_expected.dat", "r");
      status_dataOut_expected = $rewind(fp_dataOut_expected);
    end

  always @(dataOut_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        dataOut_expected <= 35'bx;
      end
      else if (ce_out == 1) begin
        status_dataOut_expected = $fscanf(fp_dataOut_expected, "%h", dataOut_expected);
      end
    end

  assign dataOut_ref = dataOut_expected;

  always @(posedge clk)
    begin : dataOut_checker
      if (reset == 1'b1) begin
        dataOut_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && dataOut !== dataOut_ref) begin
          dataOut_testFailure <= 1'b1;
          $display("ERROR in dataOut at time %t : Expected '%h' Actual '%h'", $time, dataOut_ref, dataOut);
        end
      end
    end

  assign #1 validOut_addr_delay_1 = dataOut_addr;

  // Data source for validOut_expected
  initial
    begin : validOut_expected_fileread
      fp_validOut_expected = $fopen("validOut_expected.dat", "r");
      status_validOut_expected = $rewind(fp_validOut_expected);
    end

  always @(validOut_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        validOut_expected <= 1'bx;
      end
      else if (ce_out == 1) begin
        status_validOut_expected = $fscanf(fp_validOut_expected, "%h", validOut_expected);
      end
    end

  assign validOut_ref = validOut_expected;

  always @(posedge clk)
    begin : validOut_checker
      if (reset == 1'b1) begin
        validOut_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && validOut !== validOut_ref) begin
          validOut_testFailure <= 1'b1;
          $display("ERROR in validOut at time %t : Expected '%h' Actual '%h'", $time, validOut_ref, validOut);
        end
      end
    end

  assign testFailure = dataOut_testFailure | validOut_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // LowpassFilter_tb

